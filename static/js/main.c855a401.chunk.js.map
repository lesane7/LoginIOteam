{"version":3,"sources":["login.jpg","components/login/login.js","components/login/register.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","className","ref","this","containerRef","src","loginImg","htmlFor","type","name","placeholder","React","Component","Register","App","state","isLogginActive","rightSide","classList","add","remove","setState","prevState","current","currentActive","container","onClick","changeState","bind","RightSide","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qFAAAA,EAAOC,QAAU,IAA0B,mC,8OCI9BC,EAAb,YAEI,WAAYC,GAAQ,qEACVA,IAHd,sEAMQ,OAAO,yBAAKC,UAAU,iBAAiBC,IAAKC,KAAKH,MAAMI,cACnD,yBAAKH,UAAU,UAAf,SACA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SACX,yBAAKI,IAAKC,OAEd,yBAAKL,UAAU,QACX,yBAAKA,UAAU,cACX,2BAAOM,QAAQ,YAAf,aACA,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,YAAY,cAEnD,yBAAKT,UAAU,cACX,2BAAOM,QAAQ,YAAf,aACA,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,YAAY,gBAI3D,yBAAKT,UAAU,UACX,4BAAQO,KAAK,SAASP,UAAU,OAAhC,eAxBhB,GAA2BU,IAAMC,WCDpBC,EAAb,YAEI,WAAYb,GAAQ,qEACVA,IAHd,sEAMQ,OAAO,yBAAKC,UAAU,iBAAiBC,IAAKC,KAAKH,MAAMI,cACnD,yBAAKH,UAAU,UAAf,YACA,yBAAKA,UAAU,WACX,yBAAKA,UAAU,SACX,yBAAKI,IAAKC,OAEd,yBAAKL,UAAU,QACX,yBAAKA,UAAU,cACX,2BAAOM,QAAQ,YAAf,YACA,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,YAAY,cAEnD,yBAAKT,UAAU,cACX,2BAAOM,QAAQ,SAAf,SACA,2BAAOC,KAAK,QAAQC,KAAK,QAAQC,YAAY,WAEjD,yBAAKT,UAAU,cACX,2BAAOM,QAAQ,YAAf,YACA,2BAAOC,KAAK,OAAOC,KAAK,WAAWC,YAAY,gBAI3D,yBAAKT,UAAU,UACX,4BAAQO,KAAK,SAASP,UAAU,OAAhC,kBA5BhB,GAA8BU,IAAMC,WCC9BE,E,YACJ,WAAYd,GAAQ,IAAD,8BACjB,4CAAMA,KACDe,MAAQ,CACXC,gBAAgB,GAHD,E,iFAQjBb,KAAKc,UAAUC,UAAUC,IAAI,W,oCAIFhB,KAAKY,MAAxBC,gBAGNb,KAAKc,UAAUC,UAAUE,OAAO,SAChCjB,KAAKc,UAAUC,UAAUC,IAAI,UAE7BhB,KAAKc,UAAUC,UAAUE,OAAO,QAChCjB,KAAKc,UAAUC,UAAUC,IAAI,UAE/BhB,KAAKkB,UAAS,SAAAC,GAAS,MAAK,CAAEN,gBAAiBM,EAAUN,qB,+BAGjD,IAAD,OACCA,EAAmBb,KAAKY,MAAxBC,eACFO,EAAUP,EAAiB,WAAa,QACxCQ,EAAgBR,EAAiB,QAAU,WACjD,OACE,yBAAKf,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,YAAYC,IAAK,SAAAA,GAAG,OAAK,EAAKuB,UAAYvB,IACtDc,GACC,kBAAC,EAAD,CAAOZ,aAAc,SAAAF,GAAG,OAAK,EAAKqB,QAAUrB,MAE5Cc,GACA,kBAAC,EAAD,CAAUZ,aAAc,SAAAF,GAAG,OAAK,EAAKqB,QAAUrB,MAGnD,kBAAC,EAAD,CACEqB,QAASA,EACTC,cAAeA,EACfpB,aAAc,SAAAF,GAAG,OAAK,EAAKe,UAAYf,GACvCwB,QAASvB,KAAKwB,YAAYC,KAAKzB,c,GA5CzBQ,IAAMC,WAoDlBiB,EAAY,SAAA7B,GAChB,OACE,yBACEC,UAAU,aACVC,IAAKF,EAAMI,aACXsB,QAAS1B,EAAM0B,SAEf,yBAAKzB,UAAU,mBACb,yBAAKA,UAAU,QAAQD,EAAMuB,YAMtBT,IC1DKgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c855a401.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/login.0a23bef2.jpg\";","import React from 'react';\nimport loginImg from '../../login.jpg';\n\n\nexport class Login extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return <div className=\"base-container\" ref={this.props.containerRef}>\n            <div className=\"header\">Login</div>\n            <div className=\"content\">\n                <div className=\"image\">\n                    <img src={loginImg} />\n                </div>\n                <div className=\"form\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"username\">Username </label>\n                        <input type=\"text\" name=\"username\" placeholder=\"username\"></input>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"password\">Password </label>\n                        <input type=\"text\" name=\"password\" placeholder=\"password\"></input>\n                    </div>\n                </div>\n            </div>\n            <div className=\"footer\">\n                <button type=\"button\" className=\"btn\">Login</button>\n            </div>\n        </div>\n    }\n}","import React from 'react';\nimport loginImg from '../../login.jpg';\n\nexport class Register extends React.Component {\n\n    constructor(props) {\n        super(props);\n    }\n    render() {\n        return <div className=\"base-container\" ref={this.props.containerRef}>\n            <div className=\"header\">Register</div>\n            <div className=\"content\">\n                <div className=\"image\">\n                    <img src={loginImg} />\n                </div>\n                <div className=\"form\">\n                    <div className=\"form-group\">\n                        <label htmlFor=\"username\">Username</label>\n                        <input type=\"text\" name=\"username\" placeholder=\"username\"></input>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"email\">Email</label>\n                        <input type=\"email\" name=\"email\" placeholder=\"email\"></input>\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"password\">Password</label>\n                        <input type=\"text\" name=\"password\" placeholder=\"password\"></input>\n                    </div>\n                </div>\n            </div>\n            <div className=\"footer\">\n                <button type=\"button\" className=\"btn\">Register</button>\n            </div>\n        </div>\n    }\n}","import React from \"react\";\nimport \"./App.scss\";\nimport { Login, Register } from \"./components/login/index\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLogginActive: true\n    };\n  }\n\n  componentDidMount() {\n    this.rightSide.classList.add(\"right\");\n  }\n\n  changeState() {\n    const { isLogginActive } = this.state;\n\n    if (isLogginActive) {\n      this.rightSide.classList.remove(\"right\");\n      this.rightSide.classList.add(\"left\");\n    } else {\n      this.rightSide.classList.remove(\"left\");\n      this.rightSide.classList.add(\"right\");\n    }\n    this.setState(prevState => ({ isLogginActive: !prevState.isLogginActive }));\n  }\n\n  render() {\n    const { isLogginActive } = this.state;\n    const current = isLogginActive ? \"Register\" : \"Login\";\n    const currentActive = isLogginActive ? \"login\" : \"register\";\n    return (\n      <div className=\"App\">\n        <div className=\"login\">\n          <div className=\"container\" ref={ref => (this.container = ref)}>\n            {isLogginActive && (\n              <Login containerRef={ref => (this.current = ref)} />\n            )}\n            {!isLogginActive && (\n              <Register containerRef={ref => (this.current = ref)} />\n            )}\n          </div>\n          <RightSide\n            current={current}\n            currentActive={currentActive}\n            containerRef={ref => (this.rightSide = ref)}\n            onClick={this.changeState.bind(this)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst RightSide = props => {\n  return (\n    <div\n      className=\"right-side\"\n      ref={props.containerRef}\n      onClick={props.onClick}\n    >\n      <div className=\"inner-container\">\n        <div className=\"text\">{props.current}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}